{"version":3,"sources":["Assets/Images/add.svg","Assets/Images/clear.svg","Assets/Images/save.svg","Utils/index.ts","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["timeout","time","a","trigger","Promise","r","setTimeout","formatMoney","value","fixed","float","parseFloat","isNaN","toFloat","toFixed","toLocaleString","moneyToValue","money","replace","emptyUser","name","menu","price","App","screenshotRef","React","useRef","useState","title","setTitle","reloading","setReloading","users","setUsers","allServiceFees","preTaxDiscount","postTaxDiscount","tip","isTipAbsolute","taxRate","fees","setFees","setTipAbsolute","absolute","clearUser","onUserChange","user","index","map","u","i","onFeesChange","f","menuTotal","reduce","total","tax","totalTip","takeScreenshot","current","toJpeg","image","document","createElement","href","download","click","className","ref","onChange","e","target","placeholder","prefix","defaultValue","decimalsLimit","onValueChange","length","onClick","filter","totalUsers","userTotal","p","n","type","checked","src","Save","alt","Clear","Add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOAAe,MAA0B,gCCA1B,MAA0B,kCCA1B,MAA0B,iC,OCAlC,SAAeA,EAAtB,kC,4CAAO,WAAuBC,GAAvB,eAAAC,EAAA,6DACGC,EADH,OACaF,QADb,IACaA,IAAQ,IADrB,kBAEI,IAAIG,SAAQ,SAACC,GAChBC,YAAW,WACPD,MACDF,OALJ,4C,yCCgCP,SAASI,EAAYC,EAAeC,GAEhC,MAAO,IAVX,SAAiBD,GACb,IAAME,EAAQC,WAAWH,GACzB,OAAII,MAAMF,GACC,EAEAA,EAIGG,CAAQL,EAAMM,QAAN,OAAcL,QAAd,IAAcA,IAAS,IAC1BM,iBAEvB,SAASC,EAAaC,GAClB,IAAKA,EACD,OAAO,EAEX,IAAMT,EAAQG,WACVM,EAAMC,QAAQ,YAAa,IAAIA,QAAQ,cAAe,KAE1D,OAAIN,MAAMJ,GACC,EAEJA,EAcX,IAAMW,EAAkB,CACpBC,KAAM,GACNC,KAAM,GACNC,MAAO,GAGI,SAASC,IACpB,IAAMC,EAAgBC,IAAMC,OAAuB,MAEnD,EAA0BD,IAAME,SAAS,uBAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCJ,IAAME,UAAS,GAAjD,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BN,IAAME,SAAiB,CAACR,IAAlD,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAAwBR,IAAME,SAAe,CACzCO,eAAgB,EAChBC,eAAgB,EAChBC,gBAAiB,EACjBC,IAAK,EACLC,eAAe,EACfC,QAtEiB,KAgErB,mBAAOC,EAAP,KAAaC,EAAb,KASMH,EAAgBE,EAAKF,cACrBI,EAAiB,SAACC,GACpBF,EAAQ,2BACDD,GADA,IAEHF,cAAeK,MAIjBC,EAAS,uCAAG,sBAAA1C,EAAA,6DACduC,EAAQ,CACJP,eAAgB,EAChBC,eAAgB,EAChBC,gBAAiB,EACjBC,IAAK,EACLC,eAAe,EACfC,QAxFa,KA0FjBN,EAAS,CAACd,IACVY,GAAa,GAVC,SAWR/B,EAAQ,KAXA,OAYd+B,GAAa,GAZC,2CAAH,qDAqBTc,EAAe,SAACC,EAAqBC,GACvCd,EAASD,EAAMgB,KAAI,SAACC,EAAGC,GAAJ,OAAWA,IAAMH,EAAN,2BAAmBE,GAAMH,GAASG,OAE9DE,EAAe,SAACC,GAClBX,EAAQ,2BACDD,GACAY,KAGLC,EAAYrB,EACbgB,KAAI,SAACC,GAAD,OAAOA,EAAE3B,SACbgC,QAAO,SAACC,EAAOjC,GAAR,OAAkBiC,EAAQjC,KAChCkC,GACDH,EAAYb,EAAKN,eAAiBM,EAAKL,iBACvCK,EAAKD,QAAU,KACdkB,EAAWnB,EACXE,EAAKH,KACJgB,EACGb,EAAKN,eACLsB,EACAhB,EAAKJ,gBACLI,EAAKL,iBACRK,EAAKH,IAAM,KAEZqB,EAAc,uCAAG,mBAAAxD,EAAA,SAAAA,EAAA,yDACdsB,EAAcmC,QADA,iEAICC,YAAOpC,EAAcmC,SAJtB,OAIbE,EAJa,QAKb3D,EAAI4D,SAASC,cAAc,MAC/BC,KAAOH,EACT3D,EAAE+D,SAAW,WACb/D,EAAEgE,QARiB,2CAAH,qDAWpB,OACI,sBAAKC,UAAU,gEAAf,UACI,qBAAKA,UAAU,uDAAf,SACI,sBAAKC,IAAK5C,EAAe2C,UAAU,oBAAnC,UACI,uBACIA,UAAU,wEACV3D,MAAOoB,EACPyC,SAAU,SAACC,GAAD,OAAOzC,EAASyC,EAAEC,OAAO/D,UAEvC,wBAAO2D,UAAU,0CAAjB,UACI,uBAAOA,UAAU,2DAAjB,SACI,+BACI,sCACA,oBAAIA,UAAU,uBAAd,kBACA,uCACA,oBAAIA,UAAU,uBAAd,iBACA,oBAAIA,UAAU,uBAAd,iBACA,oBAAIA,UAAU,uBAAd,iBACA,oBAAIA,UAAU,uBAAd,sBAGA,uCACA,6CAGR,kCACKnC,EAAMgB,KAAI,SAACF,EAAMI,GAAP,OACP,qBAEIiB,UACIjB,EAAI,IAAM,EACJ,yBACA,iCALd,UAQI,6BACI,uBACIiB,UAAU,mDACV3D,MAAOsC,EAAK1B,KACZoD,YAAY,OACZH,SAAU,SAACC,GAAD,OACNzB,EACI,CAAEzB,KAAMkD,EAAEC,OAAO/D,OACjB0C,QAKhB,oBAAIiB,UAAU,uBAAd,SACI,uBACIA,UAAU,mDACV3D,MAAOsC,EAAKzB,KACZmD,YAAY,OACZH,SAAU,SAACC,GAAD,OACNzB,EACI,CAAExB,KAAMiD,EAAEC,OAAO/D,OACjB0C,QAKhB,6BACI,cAAC,IAAD,CACIiB,UAAU,mDACVM,OAAO,IACPC,aAAc5B,EAAKxB,MACnBkD,YAAY,QACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACXqC,EACI,CACIvB,MAAON,EACHR,IAGR0C,QAKhB,oBAAIiB,UAAU,+EAAd,SACK5D,EACGiC,EAAKN,eAAiBF,EAAM6C,OAC5B,KAGR,oBAAIV,UAAU,+EAAd,SACK5D,GACIuC,EAAKxB,MACFkB,EAAKN,eACDF,EAAM6C,OACVrC,EAAKL,eACDH,EAAM6C,SACTrC,EAAKD,QAAU,KACpB,KAGR,oBAAI4B,UAAU,+EAAd,SACK5D,EAAYkD,EAAWzB,EAAM6C,UAElC,oBAAIV,UAAU,+EAAd,SACK5D,EACGiC,EAAKJ,gBACDJ,EAAM6C,OACNrC,EAAKL,eACDH,EAAM6C,UAGtB,oBAAIV,UAAU,0DAAd,SACK5D,GACIuC,EAAKxB,MACFkB,EAAKN,eACDF,EAAM6C,OACVrC,EAAKL,eACDH,EAAM6C,SACT,EAAIrC,EAAKD,QAAU,KACpBC,EAAKH,IAAML,EAAM6C,OACjBrC,EAAKJ,gBACDJ,EAAM6C,UAGtB,+BACK7C,EAAM6C,OAAS,GACZ,wBACIV,UAAU,iHACVW,QAAS,kBApKjC/B,EAoKkDG,OAnKlEjB,EAASD,EAAM+C,QAAO,SAAC9B,EAAGC,GAAJ,OAAUA,IAAMH,MADvB,IAACA,GAkKoB,oBAOHf,EAAM6C,QAAU,GACb,qBAAKV,UAAU,oEAxG3B,UACYjB,EADZ,YACiBlB,EAAM6C,YA4G3B,qBAAIV,UAAU,qEAAd,UACI,0CACA,oBAAIA,UAAU,yBACd,6BAAK5D,EAAY8C,KACjB,oBAAIc,UAAU,uBAAd,SACK5D,EAAYiC,EAAKN,kBAEtB,oBAAIiC,UAAU,uBAAd,SACK5D,EAAYiD,KAEjB,oBAAIW,UAAU,uBAAd,SACK5D,EAAYkD,KAEjB,oBAAIU,UAAU,uBAAd,SACK5D,EACGiC,EAAKJ,gBACDI,EAAKL,kBAGjB,6BACK5B,EACGyB,EACKgB,KAAI,SAACC,GAAD,OA9PjD,SAAmBH,EAAYN,EAAYwC,GACvC,OACKlC,EAAKxB,MACFkB,EAAKN,eAAiB8C,EACtBxC,EAAKL,eAAiB6C,IACrB,EAAIxC,EAAKD,QAAU,KACxBC,EAAKH,IAAM2C,EACXxC,EAAKJ,gBAAkB4C,EAwPiBC,CACIhC,EACAT,EACAR,EAAM6C,WAGbvB,QAAO,SAAC4B,EAAGC,GAAJ,OAAUD,EAAIC,QAGlC,gCAKZ,uBAAOhB,UAAU,wCAAjB,SACI,wBAAOA,UAAU,0DAAjB,UACI,+BACI,oBAAIA,UAAU,uBAAd,2DAIA,oBAAIA,UAAU,YAAd,kBACA,6BACI,cAAC,IAAD,CAEIA,UAAU,gCACVM,OAAO,IACPC,aAAclC,EAAKN,eACnBsC,YAAY,OACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACX2C,EAAa,CACTjB,eACIlB,EAAaR,OAV7B,UACYsB,SAepB,+BACI,qBAAIqC,UAAU,gBAAd,gBAEI,sBAAKA,UAAU,oCAAf,UACI,wBAAOA,UAAU,wCAAjB,UACI,uBACIiB,KAAK,WACLjB,UAAU,sCACVkB,SAAU/C,EACV+B,SAAU,kBACN3B,GAAe,MAGvB,sBAAMyB,UAAU,qCAAhB,wBAIJ,wBAAOA,UAAU,gCAAjB,UACI,uBACIiB,KAAK,WACLjB,UAAU,sCACVkB,QAAS/C,EACT+B,SAAU,kBACN3B,GAAe,MAGvB,sBAAMyB,UAAU,qCAAhB,+BAMZ,6BACI,cAAC,IAAD,CAEIA,UAAU,gCACVM,OAAQnC,EAAgB,IAAM,GAC9BoC,aAAclC,EAAKH,IACnBmC,YAAY,MACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACX2C,EAAa,CACTd,IAAKrB,EAAaR,OAT9B,UACY8B,GADZ,OAC4BR,SAcpC,+BACI,qBAAIqC,UAAU,gBAAd,gBAEI,sBAAKA,UAAU,wBAAf,UACI,cAAC,IAAD,CAEIA,UAAU,mEACVO,aAAclC,EAAKD,QACnBiC,YAAY,MACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACX2C,EAAa,CACTZ,QACIvB,EAAaR,OAT7B,UACYsB,IAFhB,UAiBJ,6BAAKvB,EAAYiD,QAErB,+BACI,kDACA,6BACI,cAAC,IAAD,CAEIW,UAAU,gDACVM,OAAO,IACPC,aAAclC,EAAKJ,gBACnBoC,YAAY,mBACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACX2C,EAAa,CACThB,eACInB,EAAaR,OAV7B,UACYsB,SAepB,+BACI,mDACA,6BACI,cAAC,IAAD,CAEIqC,UAAU,gDACVM,OAAO,IACPC,aAAclC,EAAKJ,gBACnBoC,YAAY,oBACZG,cAAe,EACfC,cAAe,SAACpE,GAAD,OACX2C,EAAa,CACTf,gBACIpB,EAAaR,OAV7B,UACYsB,mBAmBpC,sBAAKqC,UAAU,sCAAf,UACI,wBACIA,UAAU,yJACVW,QAASpB,EAFb,SAII,qBACIS,UAAU,uBACVmB,IAAKC,EACLC,IAAI,sBAGZ,wBACIrB,UAAU,yJACVW,QAASlC,EAFb,SAII,qBACIuB,UAAU,uBACVmB,IAAKG,EACLD,IAAI,mBAGZ,wBACIrB,UAAU,oJACVW,QAvXA,WACZ7C,EAAS,GAAD,mBAAKD,GAAL,CAAYb,MAoXZ,SAII,qBACIgD,UAAU,uBACVmB,IAAKI,EACLF,IAAI,uB,UCndbG,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC/E,EAAD,MAEJuC,SAASyC,eAAe,SAM5BZ,M","file":"static/js/main.2689a0a9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/add.2ce57a1b.svg\";","export default __webpack_public_path__ + \"static/media/clear.604f17ae.svg\";","export default __webpack_public_path__ + \"static/media/save.958aff8d.svg\";","export async function timeout(time?: number): Promise<void> {\n    const trigger = time ?? 1000\n    return new Promise((r) => {\n        setTimeout(() => {\n            r()\n        }, trigger)\n    })\n}\n","import React from 'react'\nimport Add from 'Assets/Images/add.svg'\nimport Clear from 'Assets/Images/clear.svg'\nimport Save from 'Assets/Images/save.svg'\nimport CurrencyInput from 'react-currency-input-field'\nimport { timeout } from 'Utils'\nimport { toJpeg } from 'html-to-image'\n\nconst DEFAULT_TAX_RATE = 13\n\ntype User = {\n    name: string\n    menu: string\n    price: number\n}\ntype Fees = {\n    allServiceFees: number\n    tip: number\n    isTipAbsolute: boolean\n    preTaxDiscount: number\n    postTaxDiscount: number\n    taxRate: number\n}\n\nfunction toFloat(value: string) {\n    const float = parseFloat(value)\n    if (isNaN(float)) {\n        return 0.0\n    } else {\n        return float\n    }\n}\nfunction formatMoney(value: number, fixed?: number) {\n    const float = toFloat(value.toFixed(fixed ?? 2))\n    return '$' + float.toLocaleString()\n}\nfunction moneyToValue(money: string | undefined): number {\n    if (!money) {\n        return 0.0\n    }\n    const value = parseFloat(\n        money.replace(/(?!\\.)\\D/g, '').replace(/(?!^0$)^0+/g, ''),\n    )\n    if (isNaN(value)) {\n        return 0.0\n    }\n    return value\n}\n\nfunction userTotal(user: User, fees: Fees, totalUsers: number) {\n    return (\n        (user.price +\n            fees.allServiceFees / totalUsers -\n            fees.preTaxDiscount / totalUsers) *\n            (1 + fees.taxRate / 100.0) +\n        fees.tip / totalUsers -\n        fees.postTaxDiscount / totalUsers\n    )\n}\n\nconst emptyUser: User = {\n    name: '',\n    menu: '',\n    price: 0,\n}\n\nexport default function App() {\n    const screenshotRef = React.useRef<HTMLDivElement>(null)\n\n    const [title, setTitle] = React.useState('UberEats Bill Split')\n    const [reloading, setReloading] = React.useState(false)\n    const [users, setUsers] = React.useState<User[]>([emptyUser])\n    const [fees, setFees] = React.useState<Fees>({\n        allServiceFees: 0,\n        preTaxDiscount: 0,\n        postTaxDiscount: 0,\n        tip: 0,\n        isTipAbsolute: true,\n        taxRate: DEFAULT_TAX_RATE,\n    })\n\n    const isTipAbsolute = fees.isTipAbsolute\n    const setTipAbsolute = (absolute: boolean) => {\n        setFees({\n            ...fees,\n            isTipAbsolute: absolute,\n        })\n    }\n\n    const clearUser = async () => {\n        setFees({\n            allServiceFees: 0,\n            preTaxDiscount: 0,\n            postTaxDiscount: 0,\n            tip: 0,\n            isTipAbsolute: true,\n            taxRate: DEFAULT_TAX_RATE,\n        })\n        setUsers([emptyUser])\n        setReloading(true)\n        await timeout(100)\n        setReloading(false)\n    }\n    const addUser = () => {\n        setUsers([...users, emptyUser])\n    }\n    const removeUser = (index: number) => {\n        setUsers(users.filter((u, i) => i !== index))\n    }\n\n    const onUserChange = (user: Partial<User>, index: number) => {\n        setUsers(users.map((u, i) => (i === index ? { ...u, ...user } : u)))\n    }\n    const onFeesChange = (f: Partial<Fees>) => {\n        setFees({\n            ...fees,\n            ...f,\n        })\n    }\n    const menuTotal = users\n        .map((u) => u.price)\n        .reduce((total, price) => total + price)\n    const tax =\n        (menuTotal + fees.allServiceFees - fees.preTaxDiscount) *\n        (fees.taxRate / 100.0)\n    const totalTip = isTipAbsolute\n        ? fees.tip\n        : (menuTotal +\n              fees.allServiceFees +\n              tax -\n              fees.postTaxDiscount -\n              fees.preTaxDiscount) *\n          (fees.tip / 100.0)\n\n    const takeScreenshot = async () => {\n        if (!screenshotRef.current) {\n            return\n        }\n        const image = await toJpeg(screenshotRef.current)\n        const a = document.createElement('a')\n        a.href = image\n        a.download = 'bill.jpg'\n        a.click()\n    }\n\n    return (\n        <div className=\"w-screen h-screen flex flex-1 flex-col bg-white dark:bg-black\">\n            <div className=\"flex-1 flex flex-col flex-grow overflow-scroll pb-24\">\n                <div ref={screenshotRef} className=\"flex flex-col p-5\">\n                    <input\n                        className=\"font-medium text-xl text-black dark:text-white bg-white dark:bg-black\"\n                        value={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                    />\n                    <table className=\"w-full mt-3 border-separate table-fixed\">\n                        <thead className=\"bg-blue-thead dark:bg-gray-35 text-black dark:text-white\">\n                            <tr>\n                                <th>Name</th>\n                                <th className=\"hidden sm:table-cell\">Menu</th>\n                                <th>Price</th>\n                                <th className=\"hidden sm:table-cell\">Fee</th>\n                                <th className=\"hidden sm:table-cell\">Tax</th>\n                                <th className=\"hidden sm:table-cell\">Tip</th>\n                                <th className=\"hidden sm:table-cell\">\n                                    Discount\n                                </th>\n                                <th>Total</th>\n                                <th>Manage</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {users.map((user, i) => (\n                                <tr\n                                    key={`${i}-${users.length}`}\n                                    className={\n                                        i % 2 === 0\n                                            ? 'bg-white dark:bg-black'\n                                            : 'bg-blue-tbody dark:bg-gray-900'\n                                    }\n                                >\n                                    <td>\n                                        <input\n                                            className=\"w-full bg-transparent text-black dark:text-white\"\n                                            value={user.name}\n                                            placeholder=\"Name\"\n                                            onChange={(e) =>\n                                                onUserChange(\n                                                    { name: e.target.value },\n                                                    i,\n                                                )\n                                            }\n                                        />\n                                    </td>\n                                    <td className=\"hidden sm:table-cell\">\n                                        <input\n                                            className=\"w-full bg-transparent text-black dark:text-white\"\n                                            value={user.menu}\n                                            placeholder=\"Menu\"\n                                            onChange={(e) =>\n                                                onUserChange(\n                                                    { menu: e.target.value },\n                                                    i,\n                                                )\n                                            }\n                                        />\n                                    </td>\n                                    <td>\n                                        <CurrencyInput\n                                            className=\"w-full bg-transparent text-black dark:text-white\"\n                                            prefix=\"$\"\n                                            defaultValue={user.price}\n                                            placeholder=\"Price\"\n                                            decimalsLimit={5}\n                                            onValueChange={(value) =>\n                                                onUserChange(\n                                                    {\n                                                        price: moneyToValue(\n                                                            value,\n                                                        ),\n                                                    },\n                                                    i,\n                                                )\n                                            }\n                                        />\n                                    </td>\n                                    <td className=\"bg-gray-200 hidden sm:table-cell text-black dark:bg-gray-700 dark:text-white\">\n                                        {formatMoney(\n                                            fees.allServiceFees / users.length,\n                                            5,\n                                        )}\n                                    </td>\n                                    <td className=\"bg-gray-200 hidden sm:table-cell text-black dark:bg-gray-700 dark:text-white\">\n                                        {formatMoney(\n                                            (user.price +\n                                                fees.allServiceFees /\n                                                    users.length -\n                                                fees.preTaxDiscount /\n                                                    users.length) *\n                                                (fees.taxRate / 100.0),\n                                            5,\n                                        )}\n                                    </td>\n                                    <td className=\"bg-gray-200 hidden sm:table-cell text-black dark:bg-gray-700 dark:text-white\">\n                                        {formatMoney(totalTip / users.length)}\n                                    </td>\n                                    <td className=\"bg-gray-200 hidden sm:table-cell text-black dark:bg-gray-700 dark:text-white\">\n                                        {formatMoney(\n                                            fees.postTaxDiscount /\n                                                users.length +\n                                                fees.preTaxDiscount /\n                                                    users.length,\n                                        )}\n                                    </td>\n                                    <td className=\"bg-gray-200 text-black dark:bg-gray-700 dark:text-white\">\n                                        {formatMoney(\n                                            (user.price +\n                                                fees.allServiceFees /\n                                                    users.length -\n                                                fees.preTaxDiscount /\n                                                    users.length) *\n                                                (1 + fees.taxRate / 100.0) +\n                                                fees.tip / users.length -\n                                                fees.postTaxDiscount /\n                                                    users.length,\n                                        )}\n                                    </td>\n                                    <td>\n                                        {users.length > 1 && (\n                                            <button\n                                                className=\"text-base bg-gray-35 h-7 w-20 text-center text-white rounded my-auto mx-auto md:ml-2 mt-2 md:mt-0 mb-2 md:mb-0\"\n                                                onClick={() => removeUser(i)}\n                                            >\n                                                Delete\n                                            </button>\n                                        )}\n                                        {users.length <= 1 && (\n                                            <div className=\"h-7 w-20 my-auto mx-auto md:ml-2 mt-2 md:mt-0 mb-2 md:mb-0\" />\n                                        )}\n                                    </td>\n                                </tr>\n                            ))}\n                            <tr className=\"bg-gray-300 text-black dark:bg-gray-700 text-black dark:text-white\">\n                                <td>Subtotal</td>\n                                <td className=\"hidden sm:table-cell\" />\n                                <td>{formatMoney(menuTotal)}</td>\n                                <td className=\"hidden sm:table-cell\">\n                                    {formatMoney(fees.allServiceFees)}\n                                </td>\n                                <td className=\"hidden sm:table-cell\">\n                                    {formatMoney(tax)}\n                                </td>\n                                <td className=\"hidden sm:table-cell\">\n                                    {formatMoney(totalTip)}\n                                </td>\n                                <td className=\"hidden sm:table-cell\">\n                                    {formatMoney(\n                                        fees.postTaxDiscount +\n                                            fees.preTaxDiscount,\n                                    )}\n                                </td>\n                                <td>\n                                    {formatMoney(\n                                        users\n                                            .map((u) =>\n                                                userTotal(\n                                                    u,\n                                                    fees,\n                                                    users.length,\n                                                ),\n                                            )\n                                            .reduce((p, n) => p + n),\n                                    )}\n                                </td>\n                                <td />\n                            </tr>\n                        </tbody>\n                    </table>\n\n                    <table className=\"w-full sm:w-2/3 table-fixed mt-3 mb-4\">\n                        <tbody className=\"bg-gray-200 text-black dark:bg-gray-700 dark:text-white\">\n                            <tr>\n                                <td className=\"hidden sm:table-cell\">\n                                    All Fees (Service fee, Delivery fee, ...\n                                    etc)\n                                </td>\n                                <td className=\"sm:hidden\">Fees</td>\n                                <td>\n                                    <CurrencyInput\n                                        key={`${reloading}`}\n                                        className=\"w-full bg-white dark:bg-black\"\n                                        prefix=\"$\"\n                                        defaultValue={fees.allServiceFees}\n                                        placeholder=\"Fees\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onFeesChange({\n                                                allServiceFees:\n                                                    moneyToValue(value),\n                                            })\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"flex flex-row\">\n                                    Tip\n                                    <div className=\"ml-auto mr-3 flex-col sm:flex-row\">\n                                        <label className=\"inline-flex items-center ml-2 sm:ml-0\">\n                                            <input\n                                                type=\"checkbox\"\n                                                className=\"form-checkbox h-3 w-3 text-blue-600\"\n                                                checked={!isTipAbsolute}\n                                                onChange={() =>\n                                                    setTipAbsolute(false)\n                                                }\n                                            />\n                                            <span className=\"ml-1 text-gray-700 dark:text-white\">\n                                                Percent\n                                            </span>\n                                        </label>\n                                        <label className=\"inline-flex items-center ml-2\">\n                                            <input\n                                                type=\"checkbox\"\n                                                className=\"form-checkbox h-3 w-3 text-blue-600\"\n                                                checked={isTipAbsolute}\n                                                onChange={() =>\n                                                    setTipAbsolute(true)\n                                                }\n                                            />\n                                            <span className=\"ml-1 text-gray-700 dark:text-white\">\n                                                Absolute\n                                            </span>\n                                        </label>\n                                    </div>\n                                </td>\n                                <td>\n                                    <CurrencyInput\n                                        key={`${isTipAbsolute}${reloading}`}\n                                        className=\"w-full bg-white dark:bg-black\"\n                                        prefix={isTipAbsolute ? '$' : ''}\n                                        defaultValue={fees.tip}\n                                        placeholder=\"Tip\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onFeesChange({\n                                                tip: moneyToValue(value),\n                                            })\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"flex flex-row\">\n                                    Tax\n                                    <div className=\"ml-auto mr-3 flex-row\">\n                                        <CurrencyInput\n                                            key={`${reloading}`}\n                                            className=\"bg-white w-20 ml-3 text-right pr-1 dark:bg-black dark:text-white\"\n                                            defaultValue={fees.taxRate}\n                                            placeholder=\"Tax\"\n                                            decimalsLimit={5}\n                                            onValueChange={(value) =>\n                                                onFeesChange({\n                                                    taxRate:\n                                                        moneyToValue(value),\n                                                })\n                                            }\n                                        />\n                                        %\n                                    </div>\n                                </td>\n                                <td>{formatMoney(tax)}</td>\n                            </tr>\n                            <tr>\n                                <td>Pre Tax Discount</td>\n                                <td>\n                                    <CurrencyInput\n                                        key={`${reloading}`}\n                                        className=\"w-full bg-white dark:bg-black dark:text-white\"\n                                        prefix=\"$\"\n                                        defaultValue={fees.postTaxDiscount}\n                                        placeholder=\"Pre Tax Discount\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onFeesChange({\n                                                preTaxDiscount:\n                                                    moneyToValue(value),\n                                            })\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Post Tax Discount</td>\n                                <td>\n                                    <CurrencyInput\n                                        key={`${reloading}`}\n                                        className=\"w-full bg-white dark:bg-black dark:text-white\"\n                                        prefix=\"$\"\n                                        defaultValue={fees.postTaxDiscount}\n                                        placeholder=\"Post Tax Discount\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onFeesChange({\n                                                postTaxDiscount:\n                                                    moneyToValue(value),\n                                            })\n                                        }\n                                    />\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"absolute mb-8 mr-6 bottom-0 right-0\">\n                <button\n                    className=\"mr-2 p-0 w-14 h-14 bg-blue-highlight rounded-full hover:bg-blue-hover active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\"\n                    onClick={takeScreenshot}\n                >\n                    <img\n                        className=\"w-9 h-9 inline-block\"\n                        src={Save}\n                        alt=\"Take Screenshot\"\n                    />\n                </button>\n                <button\n                    className=\"mr-2 p-0 w-14 h-14 bg-blue-highlight rounded-full hover:bg-blue-hover active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\"\n                    onClick={clearUser}\n                >\n                    <img\n                        className=\"w-9 h-9 inline-block\"\n                        src={Clear}\n                        alt=\"Clear fields\"\n                    />\n                </button>\n                <button\n                    className=\"p-0 w-14 h-14 bg-blue-highlight rounded-full hover:bg-blue-hover active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\"\n                    onClick={addUser}\n                >\n                    <img\n                        className=\"w-9 h-9 inline-block\"\n                        src={Add}\n                        alt=\"Add person\"\n                    />\n                </button>\n            </div>\n        </div>\n    )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            },\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport 'Styles/output.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}