{"version":3,"sources":["Assets/Images/add.svg","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["formatMoney","value","fixed","float","parseFloat","isNaN","toFloat","toFixed","toLocaleString","moneyToValue","money","replace","emptyUser","name","menu","price","App","React","useState","users","setUsers","allServiceFees","discount","tip","isTipAbsolute","taxRate","fees","setFees","setTipAbsolute","absolute","onUserChange","user","index","map","u","i","onFeesChange","f","menuTotal","reduce","total","tax","totalTip","className","placeholder","onChange","e","target","prefix","defaultValue","decimalsLimit","onValueChange","length","onClick","filter","totalUsers","userTotal","p","n","type","checked","src","Add","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93494e50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/add.2ce57a1b.svg\";","import React from 'react'\nimport Add from 'Assets/Images/add.svg'\nimport CurrencyInput from 'react-currency-input-field'\n\nconst DEFAULT_TAX_RATE = 13\n\ntype User = {\n    name: string\n    menu: string\n    price: number\n}\ntype Fees = {\n    allServiceFees: number\n    tip: number\n    isTipAbsolute: boolean\n    discount: number\n    taxRate: number\n}\n\nfunction toFloat(value: string) {\n    const float = parseFloat(value)\n    if (isNaN(float)) {\n        return 0.0\n    } else {\n        return float\n    }\n}\nfunction formatMoney(value: number, fixed?: number) {\n    const float = toFloat(value.toFixed(fixed ?? 2))\n    return '$' + float.toLocaleString()\n}\nfunction moneyToValue(money: string | undefined): number {\n    if (!money) {\n        return 0.0\n    }\n    const value = parseFloat(\n        money.replace(/(?!\\.)\\D/g, '').replace(/(?!^0$)^0+/g, ''),\n    )\n    if (isNaN(value)) {\n        return 0.0\n    }\n    return value\n}\n\nfunction userTotal(user: User, fees: Fees, totalUsers: number) {\n    return (\n        (user.price + fees.allServiceFees / totalUsers) *\n            (1 + fees.taxRate / 100.0) +\n        fees.tip / totalUsers -\n        fees.discount / totalUsers\n    )\n}\n\nconst emptyUser: User = {\n    name: '',\n    menu: '',\n    price: 0,\n}\n\nexport default function App() {\n    const [users, setUsers] = React.useState<User[]>([emptyUser])\n    const [fees, setFees] = React.useState<Fees>({\n        allServiceFees: 0,\n        discount: 0,\n        tip: 0,\n        isTipAbsolute: true,\n        taxRate: DEFAULT_TAX_RATE,\n    })\n    const isTipAbsolute = fees.isTipAbsolute\n    const setTipAbsolute = (absolute: boolean) => {\n        setFees({\n            ...fees,\n            isTipAbsolute: absolute,\n        })\n    }\n\n    const addUser = () => {\n        setUsers([...users, emptyUser])\n    }\n    const removeUser = (index: number) => {\n        setUsers(users.filter((u, i) => i !== index))\n    }\n\n    const onUserChange = (user: Partial<User>, index: number) => {\n        setUsers(users.map((u, i) => (i === index ? { ...u, ...user } : u)))\n    }\n    const onFeesChange = (f: Partial<Fees>) => {\n        setFees({\n            ...fees,\n            ...f,\n        })\n    }\n    const menuTotal = users\n        .map((u) => u.price)\n        .reduce((total, price) => total + price)\n    const tax = (menuTotal + fees.allServiceFees) * (fees.taxRate / 100.0)\n    const totalTip = isTipAbsolute\n        ? fees.tip\n        : (menuTotal + tax) * (fees.tip / 100.0)\n\n    return (\n        <div className=\"w-screen h-screen p-5 flex flex-1 flex-col\">\n            <div className=\"flex-1 flex flex-col flex-grow overflow-scroll\">\n                <span className=\"font-medium text-xl\">UberEats Bill Split</span>\n                <table className=\"w-full mt-3 border-separate table-fixed\">\n                    <thead className=\"bg-blue-thead\">\n                        <tr>\n                            <th>Name</th>\n                            <th className=\"hidden sm:table-cell\">Menu</th>\n                            <th>Price</th>\n                            <th className=\"hidden sm:table-cell\">Fee</th>\n                            <th className=\"hidden sm:table-cell\">Tax</th>\n                            <th className=\"hidden sm:table-cell\">Tip</th>\n                            <th className=\"hidden sm:table-cell\">Discount</th>\n                            <th>Total</th>\n                            <th>Manage</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {users.map((user, i) => (\n                            <tr key={`${i}-${users.length}`}>\n                                <td>\n                                    <input\n                                        className=\"w-full\"\n                                        value={user.name}\n                                        placeholder=\"Name\"\n                                        onChange={(e) =>\n                                            onUserChange(\n                                                { name: e.target.value },\n                                                i,\n                                            )\n                                        }\n                                    />\n                                </td>\n                                <td className=\"hidden sm:table-cell\">\n                                    <input\n                                        className=\"w-full\"\n                                        value={user.menu}\n                                        placeholder=\"Menu\"\n                                        onChange={(e) =>\n                                            onUserChange(\n                                                { menu: e.target.value },\n                                                i,\n                                            )\n                                        }\n                                    />\n                                </td>\n                                <td>\n                                    <CurrencyInput\n                                        className=\"w-full\"\n                                        prefix=\"$\"\n                                        defaultValue={user.price}\n                                        placeholder=\"Price\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onUserChange(\n                                                { price: moneyToValue(value) },\n                                                i,\n                                            )\n                                        }\n                                    />\n                                </td>\n                                <td className=\"bg-gray-200 hidden sm:table-cell\">\n                                    {formatMoney(\n                                        fees.allServiceFees / users.length,\n                                        5,\n                                    )}\n                                </td>\n                                <td className=\"bg-gray-200 hidden sm:table-cell\">\n                                    {formatMoney(\n                                        (user.price +\n                                            fees.allServiceFees /\n                                                users.length) *\n                                            (fees.taxRate / 100.0),\n                                        5,\n                                    )}\n                                </td>\n                                <td className=\"bg-gray-200 hidden sm:table-cell\">\n                                    {formatMoney(totalTip / users.length)}\n                                </td>\n                                <td className=\"bg-gray-200 hidden sm:table-cell\">\n                                    {formatMoney(fees.discount / users.length)}\n                                </td>\n                                <td className=\"bg-gray-200\">\n                                    {formatMoney(\n                                        (user.price +\n                                            fees.allServiceFees /\n                                                users.length) *\n                                            (1 + fees.taxRate / 100.0) +\n                                            fees.tip / users.length -\n                                            fees.discount / users.length,\n                                    )}\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"text-base bg-gray-35 h-7 w-20 text-center text-white rounded my-auto ml-1 md:ml-2 mt-2 md:mt-0 mb-2 md:mb-0\"\n                                        onClick={() => removeUser(i)}\n                                    >\n                                        Delete\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                        <tr className=\"bg-gray-300\">\n                            <td>Subtotal</td>\n                            <td className=\"hidden sm:table-cell\" />\n                            <td>{formatMoney(menuTotal)}</td>\n                            <td className=\"hidden sm:table-cell\">\n                                {formatMoney(fees.allServiceFees)}\n                            </td>\n                            <td className=\"hidden sm:table-cell\">\n                                {formatMoney(tax)}\n                            </td>\n                            <td className=\"hidden sm:table-cell\">\n                                {formatMoney(totalTip)}\n                            </td>\n                            <td className=\"hidden sm:table-cell\">\n                                {formatMoney(fees.discount)}\n                            </td>\n                            <td>\n                                {formatMoney(\n                                    users\n                                        .map((u) =>\n                                            userTotal(u, fees, users.length),\n                                        )\n                                        .reduce((p, n) => p + n),\n                                )}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"w-full sm:w-2/3 table-fixed mt-3 mb-4\">\n                    <tbody className=\"bg-gray-200\">\n                        <tr>\n                            <td className=\"hidden sm:table-cell\">\n                                All Fees (Service fee, Delivery fee, ... etc)\n                            </td>\n                            <td className=\"sm:hidden\">Fees</td>\n                            <td>\n                                <CurrencyInput\n                                    className=\"w-full bg-transparent\"\n                                    prefix=\"$\"\n                                    defaultValue={fees.allServiceFees}\n                                    placeholder=\"Fees\"\n                                    decimalsLimit={5}\n                                    onValueChange={(value) =>\n                                        onFeesChange({\n                                            allServiceFees: moneyToValue(value),\n                                        })\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"flex flex-row\">\n                                Tip\n                                <div className=\"ml-auto mr-3 flex-col sm:flex-row\">\n                                    <label className=\"inline-flex items-center ml-2 sm:ml-0\">\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"form-checkbox h-3 w-3 text-blue-600\"\n                                            checked={!isTipAbsolute}\n                                            onChange={() =>\n                                                setTipAbsolute(false)\n                                            }\n                                        />\n                                        <span className=\"ml-1 text-gray-700\">\n                                            Percent\n                                        </span>\n                                    </label>\n                                    <label className=\"inline-flex items-center ml-2\">\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"form-checkbox h-3 w-3 text-blue-600\"\n                                            checked={isTipAbsolute}\n                                            onChange={() =>\n                                                setTipAbsolute(true)\n                                            }\n                                        />\n                                        <span className=\"ml-1 text-gray-700\">\n                                            Absolute\n                                        </span>\n                                    </label>\n                                </div>\n                            </td>\n                            <td>\n                                <CurrencyInput\n                                    key={`${isTipAbsolute}${fees.tip}`}\n                                    className=\"w-full bg-white\"\n                                    prefix={isTipAbsolute ? '$' : ''}\n                                    defaultValue={fees.tip}\n                                    placeholder=\"Tax\"\n                                    decimalsLimit={5}\n                                    onValueChange={(value) =>\n                                        onFeesChange({\n                                            tip: moneyToValue(value),\n                                        })\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"flex flex-row\">\n                                Tax\n                                <div className=\"ml-auto mr-3 flex-row\">\n                                    <CurrencyInput\n                                        className=\"bg-white w-20 ml-3 text-right pr-1\"\n                                        prefix=\"$\"\n                                        defaultValue={fees.taxRate}\n                                        placeholder=\"Tax\"\n                                        decimalsLimit={5}\n                                        onValueChange={(value) =>\n                                            onFeesChange({\n                                                taxRate: moneyToValue(value),\n                                            })\n                                        }\n                                    />\n                                    %\n                                </div>\n                            </td>\n                            <td>{formatMoney(tax)}</td>\n                        </tr>\n                        <tr>\n                            <td>Discount</td>\n                            <td>\n                                <CurrencyInput\n                                    className=\"w-full bg-white\"\n                                    prefix=\"$\"\n                                    defaultValue={fees.discount}\n                                    placeholder=\"Discount\"\n                                    decimalsLimit={5}\n                                    onValueChange={(value) =>\n                                        onFeesChange({\n                                            discount: moneyToValue(value),\n                                        })\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"absolute mb-4 mr-4 bottom-0 right-0\">\n                <button\n                    className=\"p-0 w-16 h-16 bg-blue-highlight rounded-full hover:bg-blue-hover active:shadow-lg mouse shadow transition ease-in duration-200 focus:outline-none\"\n                    onClick={addUser}\n                >\n                    <img\n                        className=\"w-10 h-10 inline-block\"\n                        src={Add}\n                        alt=\"Add person\"\n                    />\n                </button>\n            </div>\n        </div>\n    )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            },\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport 'Styles/output.css'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}